name: Build and Push Custom Caddy Image

on:
  workflow_dispatch:

  schedule:
    - cron: '30 18 * * 0,3'

  push:
    branches:
      - 'main'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # New Step: Restore the last successful versions from cache
      - name: Restore version cache
        id: cache-versions-restore
        uses: actions/cache/restore@v4
        with:
          path: versions.txt
          key: caddy-versions-cache

# =======================================================
# ========= TEMPORARY STEP FOR TESTING - ADD THIS =========
# =======================================================
      - name: (TEMP) Simulate an old version
        if: steps.cache-versions-restore.outputs.cache-hit == 'true'
        run: |
          echo "--> Simulating an old dependency version to force a build."
          echo "PREVIOUS_CADDY_DIGEST=outdated-digest" > versions.txt
# =======================================================


      - name: Check for new base image or plugin versions
        id: check-versions
        run: |
          # 1. Get current upstream versions
          echo "--> Fetching current dependency versions..."
          CURRENT_CADDY_DIGEST=$(docker manifest inspect caddy:latest | jq -r '.Descriptor.digest')
          CURRENT_PLUGIN_VERSION=$(curl -s "https://api.github.com/repos/caddy-dns/cloudflare/tags" | jq -r '.[0].name // ""')
          echo "Current Caddy Digest: $CURRENT_CADDY_DIGEST"
          echo "Current Plugin Version: $CURRENT_PLUGIN_VERSION"

          # 2. Get previous versions from the cached file
          if [[ -f versions.txt ]]; then
            source versions.txt
            echo "Previous Caddy Digest: $PREVIOUS_CADDY_DIGEST"
            echo "Previous Plugin Version: $PREVIOUS_PLUGIN_VERSION"
          else
            echo "--> No previous version cache found. A new build is required."
            # Set empty previous versions to ensure the first build runs
            PREVIOUS_CADDY_DIGEST=""
            PREVIOUS_PLUGIN_VERSION=""
          fi
          
          # 3. Compare and decide if a build is needed
          NEEDS_BUILD="false"
          if [[ "$CURRENT_CADDY_DIGEST" != "$PREVIOUS_CADDY_DIGEST" || "$CURRENT_PLUGIN_VERSION" != "$PREVIOUS_PLUGIN_VERSION" ]]; then
            echo "--> Changes detected. A new build is required."
            NEEDS_BUILD="true"
            # Write the new versions to the file for caching
            echo "PREVIOUS_CADDY_DIGEST=$CURRENT_CADDY_DIGEST" > versions.txt
            echo "PREVIOUS_PLUGIN_VERSION=$CURRENT_PLUGIN_VERSION" >> versions.txt
          else
            echo "--> Dependencies are up-to-date. Build will be skipped."
          fi

          # 4. Set outputs for subsequent steps
          echo "needs_build=$NEEDS_BUILD" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        if: steps.check-versions.outputs.needs_build == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        if: steps.check-versions.outputs.needs_build == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # New Step: Save the versions file to the cache after a successful build
      - name: Save version cache
        if: steps.check-versions.outputs.needs_build == 'true'
        id: cache-versions-save
        uses: actions/cache/save@v4
        with:
          path: versions.txt
          key: caddy-versions-cache

      - name: Print Skip Message
        if: steps.check-versions.outputs.needs_build == 'false'
        run: echo "âœ… Build and push skipped as no dependency updates were found."
